@page "/preguntas/{IdCuestionario:int}"

@using GESIIMO.Model
@using GESIIMO.Services
@using GESIIMO.Pages.OpcionPreguntas

@inject IPreguntaService preguntaService
@inject NavigationManager navigationManager
@inject IDialogService dialogService

@if (Preguntas == null)
{
    <div class="spinner"></div>
}
else
{
    <MudText Typo="Typo.h5"><b>Listado de preguntas</b></MudText>

    if (!Preguntas.Any())
    {
        <div class="d-flex mt-3">
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.AddCircle" OnClick="AddPregunta">Agregar</MudButton>
        </div>

        <div class="d-flex mt-3">
            <p><em>No se encontraron resultados.</em></p>
        </div>
    }
    else
    {
        <MudTable Items="@Preguntas" Dense="true" Hover="true" Filter="new Func<Pregunta, bool>(FilterFunc)" Class="mt-3">
            <ToolBarContent>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Buscar" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Variant="Variant.Outlined"
                              Margin="Margin.Dense">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.AddCircle" Title="Agregar pregunta" Color="Color.Error" OnClick="AddPregunta"></MudIconButton></MudTh>
                <MudTh>Opciones</MudTh>
                <MudTh>Cuestionario</MudTh>
                <MudTh>Tipo de pregunta</MudTh>
                <MudTh>Tipo de gráfica</MudTh>
                <MudTh>Pregunta</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd><MudIconButton Icon="@Icons.Material.Filled.Edit" Title="Editar pregunta" Style="color: #63BEA9" Size="Size.Large" OnClick="@(args => EditPregunta(context))"></MudIconButton></MudTd>
                <MudTd>
                    <MudBadge Content="context.CantOpciones" Color="Color.Primary" Overlap="true" Bottom="true" Class="mt-0 mb-3">
                        <MudIconButton Icon="@Icons.Material.Filled.QuestionAnswer" Title="Agregar opciones de pregunta" Color="Color.Error" Size="Size.Large" OnClick="@(args => AddOpcionPregunta(context))" Disabled="context.IndRespondida"></MudIconButton>
                    </MudBadge>
                </MudTd>
                <MudTd>@context.Cuestionario</MudTd>
                <MudTd>@context.DescripcionTipoPregunta</MudTd>
                <MudTd>@context.DescripcionTipoGrafica</MudTd>
                <MudTd>@context.PreguntaDescripcion</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
}

@code {
    [Parameter] public int IdCuestionario { get; set; }

    private IEnumerable<Pregunta> Preguntas { get; set; }
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateGrid();
    }

    private async Task UpdateGrid()
    {
        Preguntas = await preguntaService.GetPreguntas(IdCuestionario);
    }

    private bool FilterFunc(Pregunta element)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.PreguntaDescripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    }

    #region Eventos Grid

    private async Task AddPregunta()
    {
        await ShowPreguntaForm(0, IdCuestionario, "ADD");
    }

    private async Task EditPregunta(Pregunta data)
    {
        await ShowPreguntaForm(data.IdPregunta, IdCuestionario, "EDIT");
    }


    private async void AddOpcionPregunta(Pregunta data)
    {
        await ShowOpcionForm(data.IdPregunta);
    }

    private async Task EliminarPregunta(Pregunta data)
    {
        await ShowEliminarPreguntaForm(data.IdPregunta, data.PreguntaDescripcion);
    }

    private async Task ShowEliminarPreguntaForm(int idPregunta, string Pregunta)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(EliminarPreguntaForm.IdPregunta), idPregunta);
        parameters.Add(nameof(EliminarPreguntaForm.Pregunta), Pregunta);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };

        var dialog = dialogService.Show<EliminarPreguntaForm>("Eliminar", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await UpdateGrid();
        }
    }

    #endregion

    #region Eventos Form

    private async Task ShowPreguntaForm(int idPregunta, int idCuestionario, string accion)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(PreguntaForm.IdPregunta), idPregunta);
        parameters.Add(nameof(PreguntaForm.IdCuestionario), idCuestionario);
        parameters.Add(nameof(PreguntaForm.Accion), accion);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = dialogService.Show<PreguntaForm>("Cargando...", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await UpdateGrid();
        }
    }

    private async Task ShowOpcionForm(int idPregunta)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ListOpcionPreguntasPage.IdPregunta), idPregunta);


        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = dialogService.Show<ListOpcionPreguntasPage>("Cargando...", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await UpdateGrid();
        }
    }
    #endregion
}