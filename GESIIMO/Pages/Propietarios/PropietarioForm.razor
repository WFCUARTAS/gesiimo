@using GESIIMO.Model
@using GESIIMO.Services

@inject IPropietarioService propietarioService
@inject IListaService listaService
@inject ISnackbar Snackbar

@if (loading)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Class="mb-2 mx-5" />
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Class="mb-2 mx-5" />
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Class="mb-4 mx-5" />
}
else
{
    <EditForm Model="@Propietario" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6" Class="d-flex justify-center">@MudDialog.Title</MudText>
            </TitleContent>
            <DialogContent>
                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                        <MudTextField Label="Nombre" @bind-Value="Propietario.Nombre" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <ValidationMessage For="@(() => Propietario.Nombre)" />
                    </MudItem>

                    <MudItem xs="12" sm="12" md="12">
                        <MudTextField Label="Apellido" @bind-Value="Propietario.Apellido" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <ValidationMessage For="@(() => Propietario.Apellido)" />
                    </MudItem>

                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Label="Correo electrónico" @bind-Value="Propietario.Email" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <ValidationMessage For="@(() => Propietario.Email)" />
                    </MudItem>

                    <MudItem xs="12" sm="12" md="6">
                        <MudTextField Label="Celular" @bind-Value="Propietario.Celular" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <ValidationMessage For="@(() => Propietario.Celular)" />
                    </MudItem>
                </MudGrid>
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Outlined" Color="Color.Default" Disabled="@(validated)" ButtonType="ButtonType.Button" OnClick="OnCancel">Cancelar</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(validated)" ButtonType="ButtonType.Submit" DisableElevation="true">Guardar</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int IdPropietario { get; set; }
    [Parameter] public string Accion { get; set; }

    private Propietario Propietario { get; set; }
    private IEnumerable<Lista> Conjuntos { get; set; }

    string title;
    private bool validated = false;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        Conjuntos = await listaService.GetLista("Conjunto", null, null, null);

        if (IdPropietario == 0)
        {
            MudDialog.SetTitle("Crear Propietario");
            Propietario = new Propietario {
                IdPropietario = IdPropietario
            };
        }
        else
        {
            MudDialog.SetTitle("Editar Propietario");
            Propietario = await propietarioService.GetPropietario(IdPropietario);
        }

        loading = false;
    }

    private async Task OnValidSubmit()
    {
        try
        {
            await propietarioService.SetPropietario(Propietario);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Success);
            throw;
        }
    }

    private void OnCancel()
    {
        MudDialog.Cancel();
    }
}
