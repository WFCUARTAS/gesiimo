@page "/torres/{IdConjunto:int}"

@using GESIIMO.Model
@using GESIIMO.Services

@inject ITorreService torreService
@inject NavigationManager navigationManager
@inject IDialogService dialogService

@if (Torres == null)
{
    <div class="spinner"></div>
}
else
{
    <MudText Typo="Typo.h5"><b>Listado de Torres</b></MudText>

    if (!Torres.Any())
    {
        <div class="d-flex mt-3">
            <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.AddCircle" OnClick="AddTorre">Agregar</MudButton>
        </div>

        <div class="d-flex mt-3">
            <p><em>No se encontraron resultados.</em></p>
        </div>
    }
    else
    {
        <MudTable Items="@Torres" Dense="true" Hover="true" Filter="new Func<Torre, bool>(FilterFunc)" Class="mt-3">
            <ToolBarContent>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.AddCircle" Title="Agregar" Color="Color.Error" OnClick="AddTorre"></MudIconButton></MudTh>
                <MudTh>Apartamentos</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Torre, object>(x=>x.Descripcion)" InitialDirection="SortDirection.Ascending">Torre</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd><MudIconButton Icon="@Icons.Material.Filled.Edit" Title="Editar"  Color="Color.Primary" Size="Size.Large" OnClick="@(args => EditTorre(context))"></MudIconButton></MudTd>
                <MudTd><MudIconButton Icon="@Icons.Material.Filled.Apartment" Color="Color.Error" Size="Size.Large" OnClick="@(args => AddApartamento(context))"></MudIconButton></MudTd>
                <MudTd>@context.Descripcion</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
}

@code {
    [Parameter] public int IdConjunto { get; set; }

    private IEnumerable<Torre> Torres { get; set; }
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await UpdateGrid();
    }

    private async Task UpdateGrid()
    {
        Torres = await torreService.GetTorres(IdConjunto);
    }

    private bool FilterFunc(Torre element)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.Descripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    }

    #region Eventos Grid

    private async Task AddTorre()
    {
        await ShowTorreForm(0, IdConjunto, "ADD");
    }

    private async Task EditTorre(Torre data)
    {
        await ShowTorreForm(data.IdTorre, IdConjunto, "EDIT");
    }

    private void AddApartamento(Torre data)
    {
        navigationManager.NavigateTo($"apartamentos/{data.IdTorre}");
    }

    #endregion

    #region Eventos Form

    private async Task ShowTorreForm(int idTorre, int idConjunto, string accion)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(TorreForm.IdTorre), idTorre);
        parameters.Add(nameof(TorreForm.IdConjunto), idConjunto);
        parameters.Add(nameof(TorreForm.Accion), accion);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };

        var dialog = dialogService.Show<TorreForm>("Cargando...", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await UpdateGrid();
        }
    }

    #endregion
}