@page "/poderes/{IdAsamblea:int}"

@using GESIIMO.Model
@using GESIIMO.Services

@inject IPoderService poderService
@inject IAsambleaService asambleaService
@inject NavigationManager navigationManager
@inject IDialogService dialogService

@if (Poderes == null)
{
    <div class="spinner"></div>
}
else
{
    <MudText Typo="Typo.h5"><b>Listado de poderes</b></MudText>

    if (!Poderes.Any())
    {
        <div class="d-flex mt-3">
            <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.AddCircle" OnClick="AddPoder">Agregar</MudButton>
        </div>

        <div class="d-flex mt-3">
            <p><em>No se encontraron resultados.</em></p>
        </div>
    }
    else
    {
        <MudTable Items="@Poderes" Dense="true" Hover="true" Filter="new Func<Poder, bool>(FilterFunc)" Class="mt-3">
            <ToolBarContent>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Buscar" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Variant="Variant.Outlined"
                              Margin="Margin.Dense">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.AddCircle" Title="Agregar poder" Color="Color.Error" OnClick="AddPoder"></MudIconButton></MudTh>
                <MudTh>Asamblea</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Poder, object>(x=>x.Representante)" InitialDirection="SortDirection.Ascending">Representante</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Poder, object>(x=>x.Representado)" InitialDirection="SortDirection.Ascending">Representado</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd><MudIconButton Icon="@Icons.Material.Filled.Edit" Title="Editar poder"  Style="color: #63BEA9" Size="Size.Large" OnClick="@(args => EditPoder(context))"></MudIconButton></MudTd>
                <MudTd>@context.DesAsamblea</MudTd>
                <MudTd>@context.Representante</MudTd>
                <MudTd>@context.Representado</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
}

@code {
    [Parameter] public int IdAsamblea { get; set; }

    private IEnumerable<Poder> Poderes { get; set; }
    private Asamblea asamblea { get; set; }

    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        asamblea = await asambleaService.GetAsamblea(IdAsamblea);
        await UpdateGrid();
    }

    private async Task UpdateGrid()
    {
        Poderes = await poderService.GetPoderes(IdAsamblea);
    }

    private bool FilterFunc(Poder element)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (element.Representante.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (element.Representado.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;

        return false;
    }

    #region Eventos Grid

    private async Task AddPoder()
    {
        await ShowPoderForm(0, asamblea, "ADD");
    }

    private async Task EditPoder(Poder data)
    {
        await ShowPoderForm(data.IdPoder, asamblea, "EDIT");
    }

    #endregion

    #region Eventos Form

    private async Task ShowPoderForm(int idPoder, Asamblea asamblea, string accion)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(PoderForm.IdPoder), idPoder);
        parameters.Add(nameof(PoderForm.asamblea), asamblea);
        parameters.Add(nameof(PoderForm.Accion), accion);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };

        var dialog = dialogService.Show<PoderForm>("Cargando...", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await UpdateGrid();
        }
    }

    #endregion
}