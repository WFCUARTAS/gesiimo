@using GESIIMO.Model
@using GESIIMO.Services

@inject IApartamentoService apartamentoService
@inject ITorreService torreService

@if (visible)
{
    <EditForm Model="@apartamento" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ModalLayout>
            <Header>
                <div id="modalLabel" class="h5 modal-title font-weight-bold">@title</div>
                <button @onclick="OnCancel" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </Header>
            <Body>
                <div class="row">
                    @*<div class="form-group col-12 col-sm-12 col-md-6 col-lg-3">
                        <RadzenLabel Text="Aplicación" />
                        <RadzenAutoComplete @bind-Value="ClienteApiRestDto.AplicacionId"
                                            Data="@Aplicaciones"
                                            TextProperty="AplicacionId"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Change=@(args => AplicacionId_OnChange(args))
                                            class="w-100" />
                        <ValidationMessage For="@(() => ClienteApiRestDto.AplicacionId)" />
                    </div>*@

                    <!--<div class="form-group col-12 col-sm-12 col-md-6 col-lg-3">-->
                        @*Data=@(customers.Select(c => new { CustomerID = c.CustomerID, CompanyName = c.CompanyName }).Distinct())*@
                        <!--<RadzenLabel Text="Torre" />
                        <RadzenDropDown @bind-Value="apartamento.IdTorre"
                                        TValue="int" 
                                        Data="@torres" 
                                        TextProperty="Descripcion" 
                                        ValueProperty="IdTorre" 
                                        class="w-100"/>
                        <ValidationMessage For="@(() => apartamento.IdTorre)" />
                    </div>-->

                    <div class="form-group col-12 col-sm-12 col-md-6 col-lg-7">
                        <RadzenLabel Text="Descripción" />
                        <RadzenTextBox @bind-Value="@apartamento.Descripcion" class="w-100" />
                        <ValidationMessage For="@(() => apartamento.Descripcion)" />
                    </div>

                    <div class="form-group col-12 col-sm-12 col-md-12 col-lg-2">
                        <RadzenLabel Text="Coeficiente" />
                        <RadzenNumeric  @bind-Value="@apartamento.Coeficiente" class="w-100" />
                        <ValidationMessage For="@(() => apartamento.Coeficiente)" />
                    </div>
                </div>

                @*<RadzenNotification />*@
            </Body>
            <Footer>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" ButtonType="ButtonType.Button" Click="OnCancel">Cancelar</RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Submit">Guardar</RadzenButton>
            </Footer>
        </ModalLayout>
    </EditForm>
}

@code {
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public int IdTorre { get; set; }

    Apartamento apartamento = new Apartamento();
    bool visible = false;
    string title;

    public async Task Show(int idApartamento)
    {
        if (idApartamento == 0)
        {
            title = "Crear Apartamento";
            apartamento = new Apartamento()
            {
                IdTorre = IdTorre,
                CodNovedad = "ACT",
                Estado = true
            };
        }
        else
        {
            title = "Editar Apartamento";
            apartamento = await apartamentoService.GetApartamento(idApartamento);
        }

        //torres = await torreService.GetTorres(IdConjunto);
        visible = true;
    }

    public void Hide()
    {
        visible = false;
    }

    private async Task OnValidSubmit()
    {
        await apartamentoService.SetApartamento(apartamento);
        await OnSaved.InvokeAsync();
        visible = false;
    }
}